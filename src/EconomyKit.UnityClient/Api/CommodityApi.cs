/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using EconomyKit.UnityClient.Client;
using EconomyKit.UnityClient.Model;

namespace EconomyKit.UnityClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommodityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a commodity associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <returns>CommodityResult</returns>
        CommodityResult CreateCommodity (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a commodity associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <returns>ApiResponse of CommodityResult</returns>
        ApiResponse<CommodityResult> CreateCommodityWithHttpInfo (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Give a commodity to a player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <returns>CommodityStackResult</returns>
        CommodityStackResult GiveCommodity (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Give a commodity to a player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <returns>ApiResponse of CommodityStackResult</returns>
        ApiResponse<CommodityStackResult> GiveCommodityWithHttpInfo (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all commodities associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <returns>PaginatedResponseCommodityResult</returns>
        PaginatedResponseCommodityResult ListCommodities (int? page = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all commodities associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <returns>ApiResponse of PaginatedResponseCommodityResult</returns>
        ApiResponse<PaginatedResponseCommodityResult> ListCommoditiesWithHttpInfo (int? page = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a commodity associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CommodityResult</returns>
        System.Threading.Tasks.Task<CommodityResult> CreateCommodityAsync (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a commodity associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CommodityResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommodityResult>> CreateCommodityWithHttpInfoAsync (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Give a commodity to a player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CommodityStackResult</returns>
        System.Threading.Tasks.Task<CommodityStackResult> GiveCommodityAsync (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Give a commodity to a player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CommodityStackResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommodityStackResult>> GiveCommodityWithHttpInfoAsync (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all commodities associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PaginatedResponseCommodityResult</returns>
        System.Threading.Tasks.Task<PaginatedResponseCommodityResult> ListCommoditiesAsync (int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all commodities associated with a Customer App
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PaginatedResponseCommodityResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedResponseCommodityResult>> ListCommoditiesWithHttpInfoAsync (int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommodityApi : ICommodityApi
    {
        private EconomyKit.UnityClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommodityApi(String basePath)
        {
            this.Configuration = new EconomyKit.UnityClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EconomyKit.UnityClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityApi"/> class
        /// </summary>
        /// <returns></returns>
        public CommodityApi()
        {
            this.Configuration = EconomyKit.UnityClient.Client.Configuration.Default;

            ExceptionFactory = EconomyKit.UnityClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommodityApi(EconomyKit.UnityClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EconomyKit.UnityClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EconomyKit.UnityClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EconomyKit.UnityClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EconomyKit.UnityClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create a commodity associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <returns>CommodityResult</returns>
        public CommodityResult CreateCommodity (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody))
        {
             ApiResponse<CommodityResult> localVarResponse = CreateCommodityWithHttpInfo(commodityCreateBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a commodity associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <returns>ApiResponse of CommodityResult</returns>
        public ApiResponse<CommodityResult> CreateCommodityWithHttpInfo (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody))
        {

            var localVarPath = "/inventories/api/v1/commodity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCreateBody != null && commodityCreateBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commodityCreateBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commodityCreateBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCommodity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommodityResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityResult)));
        }

        /// <summary>
        ///  Create a commodity associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CommodityResult</returns>
        public async System.Threading.Tasks.Task<CommodityResult> CreateCommodityAsync (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CommodityResult> localVarResponse = await CreateCommodityWithHttpInfoAsync(commodityCreateBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a commodity associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CommodityResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommodityResult>> CreateCommodityWithHttpInfoAsync (CommodityCreateBody commodityCreateBody = default(CommodityCreateBody), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/commodity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCreateBody != null && commodityCreateBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commodityCreateBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commodityCreateBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCommodity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommodityResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityResult)));
        }

        /// <summary>
        ///  Give a commodity to a player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <returns>CommodityStackResult</returns>
        public CommodityStackResult GiveCommodity (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody))
        {
             ApiResponse<CommodityStackResult> localVarResponse = GiveCommodityWithHttpInfo(commodityStackCreateBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Give a commodity to a player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <returns>ApiResponse of CommodityStackResult</returns>
        public ApiResponse<CommodityStackResult> GiveCommodityWithHttpInfo (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody))
        {

            var localVarPath = "/inventories/api/v1/commodity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityStackCreateBody != null && commodityStackCreateBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commodityStackCreateBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commodityStackCreateBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GiveCommodity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityStackResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommodityStackResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityStackResult)));
        }

        /// <summary>
        ///  Give a commodity to a player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CommodityStackResult</returns>
        public async System.Threading.Tasks.Task<CommodityStackResult> GiveCommodityAsync (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CommodityStackResult> localVarResponse = await GiveCommodityWithHttpInfoAsync(commodityStackCreateBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Give a commodity to a player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityStackCreateBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CommodityStackResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommodityStackResult>> GiveCommodityWithHttpInfoAsync (CommodityStackCreateBody commodityStackCreateBody = default(CommodityStackCreateBody), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/commodity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityStackCreateBody != null && commodityStackCreateBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commodityStackCreateBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commodityStackCreateBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GiveCommodity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityStackResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommodityStackResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityStackResult)));
        }

        /// <summary>
        ///  List all commodities associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <returns>PaginatedResponseCommodityResult</returns>
        public PaginatedResponseCommodityResult ListCommodities (int? page = default(int?))
        {
             ApiResponse<PaginatedResponseCommodityResult> localVarResponse = ListCommoditiesWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List all commodities associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <returns>ApiResponse of PaginatedResponseCommodityResult</returns>
        public ApiResponse<PaginatedResponseCommodityResult> ListCommoditiesWithHttpInfo (int? page = default(int?))
        {

            var localVarPath = "/inventories/api/v1/commodity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCommodities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedResponseCommodityResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaginatedResponseCommodityResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseCommodityResult)));
        }

        /// <summary>
        ///  List all commodities associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PaginatedResponseCommodityResult</returns>
        public async System.Threading.Tasks.Task<PaginatedResponseCommodityResult> ListCommoditiesAsync (int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PaginatedResponseCommodityResult> localVarResponse = await ListCommoditiesWithHttpInfoAsync(page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List all commodities associated with a Customer App
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PaginatedResponseCommodityResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedResponseCommodityResult>> ListCommoditiesWithHttpInfoAsync (int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/commodity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCommodities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedResponseCommodityResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaginatedResponseCommodityResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseCommodityResult)));
        }

    }
}
