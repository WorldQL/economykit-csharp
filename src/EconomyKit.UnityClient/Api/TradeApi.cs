/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using EconomyKit.UnityClient.Client;
using EconomyKit.UnityClient.Model;

namespace EconomyKit.UnityClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts & executes a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        TradeRequestModel AcceptTradeRequest (TradeActionBody tradeActionBody = default(TradeActionBody));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts & executes a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        ApiResponse<TradeRequestModel> AcceptTradeRequestWithHttpInfo (TradeActionBody tradeActionBody = default(TradeActionBody));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Denies a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        TradeRequestModel DenyTradeRequest (TradeActionBody tradeActionBody = default(TradeActionBody));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Denies a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        ApiResponse<TradeRequestModel> DenyTradeRequestWithHttpInfo (TradeActionBody tradeActionBody = default(TradeActionBody));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all trades associated with a Player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <returns>ListTradesResponse</returns>
        ListTradesResponse ListTrades (Guid? player = default(Guid?), bool? activeOnly = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all trades associated with a Player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <returns>ApiResponse of ListTradesResponse</returns>
        ApiResponse<ListTradesResponse> ListTradesWithHttpInfo (Guid? player = default(Guid?), bool? activeOnly = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        TradeRequestModel PlaceTradeRequest (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        ApiResponse<TradeRequestModel> PlaceTradeRequestWithHttpInfo (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the full details of a specific trade
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        TradeRequestModel TradeDetails (Guid? trade = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the full details of a specific trade
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        ApiResponse<TradeRequestModel> TradeDetailsWithHttpInfo (Guid? trade = default(Guid?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts & executes a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        System.Threading.Tasks.Task<TradeRequestModel> AcceptTradeRequestAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts & executes a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> AcceptTradeRequestWithHttpInfoAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Denies a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        System.Threading.Tasks.Task<TradeRequestModel> DenyTradeRequestAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Denies a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> DenyTradeRequestWithHttpInfoAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all trades associated with a Player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListTradesResponse</returns>
        System.Threading.Tasks.Task<ListTradesResponse> ListTradesAsync (Guid? player = default(Guid?), bool? activeOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all trades associated with a Player
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListTradesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTradesResponse>> ListTradesWithHttpInfoAsync (Guid? player = default(Guid?), bool? activeOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        System.Threading.Tasks.Task<TradeRequestModel> PlaceTradeRequestAsync (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a trade request
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> PlaceTradeRequestWithHttpInfoAsync (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the full details of a specific trade
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        System.Threading.Tasks.Task<TradeRequestModel> TradeDetailsAsync (Guid? trade = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the full details of a specific trade
        /// </remarks>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> TradeDetailsWithHttpInfoAsync (Guid? trade = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradeApi : ITradeApi
    {
        private EconomyKit.UnityClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeApi(String basePath)
        {
            this.Configuration = new EconomyKit.UnityClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EconomyKit.UnityClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class
        /// </summary>
        /// <returns></returns>
        public TradeApi()
        {
            this.Configuration = EconomyKit.UnityClient.Client.Configuration.Default;

            ExceptionFactory = EconomyKit.UnityClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradeApi(EconomyKit.UnityClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EconomyKit.UnityClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EconomyKit.UnityClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EconomyKit.UnityClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EconomyKit.UnityClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Accepts & executes a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        public TradeRequestModel AcceptTradeRequest (TradeActionBody tradeActionBody = default(TradeActionBody))
        {
             ApiResponse<TradeRequestModel> localVarResponse = AcceptTradeRequestWithHttpInfo(tradeActionBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Accepts & executes a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        public ApiResponse<TradeRequestModel> AcceptTradeRequestWithHttpInfo (TradeActionBody tradeActionBody = default(TradeActionBody))
        {

            var localVarPath = "/inventories/api/v1/trade/accept/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tradeActionBody != null && tradeActionBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tradeActionBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tradeActionBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptTradeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  Accepts & executes a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        public async System.Threading.Tasks.Task<TradeRequestModel> AcceptTradeRequestAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TradeRequestModel> localVarResponse = await AcceptTradeRequestWithHttpInfoAsync(tradeActionBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Accepts & executes a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> AcceptTradeRequestWithHttpInfoAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/trade/accept/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tradeActionBody != null && tradeActionBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tradeActionBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tradeActionBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptTradeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  Denies a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        public TradeRequestModel DenyTradeRequest (TradeActionBody tradeActionBody = default(TradeActionBody))
        {
             ApiResponse<TradeRequestModel> localVarResponse = DenyTradeRequestWithHttpInfo(tradeActionBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Denies a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        public ApiResponse<TradeRequestModel> DenyTradeRequestWithHttpInfo (TradeActionBody tradeActionBody = default(TradeActionBody))
        {

            var localVarPath = "/inventories/api/v1/trade/deny/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tradeActionBody != null && tradeActionBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tradeActionBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tradeActionBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DenyTradeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  Denies a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        public async System.Threading.Tasks.Task<TradeRequestModel> DenyTradeRequestAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TradeRequestModel> localVarResponse = await DenyTradeRequestWithHttpInfoAsync(tradeActionBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Denies a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tradeActionBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> DenyTradeRequestWithHttpInfoAsync (TradeActionBody tradeActionBody = default(TradeActionBody), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/trade/deny/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tradeActionBody != null && tradeActionBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tradeActionBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tradeActionBody; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DenyTradeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  List all trades associated with a Player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <returns>ListTradesResponse</returns>
        public ListTradesResponse ListTrades (Guid? player = default(Guid?), bool? activeOnly = default(bool?))
        {
             ApiResponse<ListTradesResponse> localVarResponse = ListTradesWithHttpInfo(player, activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List all trades associated with a Player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <returns>ApiResponse of ListTradesResponse</returns>
        public ApiResponse<ListTradesResponse> ListTradesWithHttpInfo (Guid? player = default(Guid?), bool? activeOnly = default(bool?))
        {

            var localVarPath = "/inventories/api/v1/trades/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (player != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "player", player)); // query parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_only", activeOnly)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListTradesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListTradesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTradesResponse)));
        }

        /// <summary>
        ///  List all trades associated with a Player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListTradesResponse</returns>
        public async System.Threading.Tasks.Task<ListTradesResponse> ListTradesAsync (Guid? player = default(Guid?), bool? activeOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListTradesResponse> localVarResponse = await ListTradesWithHttpInfoAsync(player, activeOnly, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List all trades associated with a Player
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"> (optional)</param>
        /// <param name="activeOnly"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListTradesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListTradesResponse>> ListTradesWithHttpInfoAsync (Guid? player = default(Guid?), bool? activeOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/trades/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (player != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "player", player)); // query parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_only", activeOnly)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListTradesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListTradesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTradesResponse)));
        }

        /// <summary>
        ///  Create a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        public TradeRequestModel PlaceTradeRequest (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest))
        {
             ApiResponse<TradeRequestModel> localVarResponse = PlaceTradeRequestWithHttpInfo(placeTradeReqRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        public ApiResponse<TradeRequestModel> PlaceTradeRequestWithHttpInfo (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest))
        {

            var localVarPath = "/inventories/api/v1/trade/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (placeTradeReqRequest != null && placeTradeReqRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(placeTradeReqRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = placeTradeReqRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceTradeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  Create a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        public async System.Threading.Tasks.Task<TradeRequestModel> PlaceTradeRequestAsync (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TradeRequestModel> localVarResponse = await PlaceTradeRequestWithHttpInfoAsync(placeTradeReqRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a trade request
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeTradeReqRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> PlaceTradeRequestWithHttpInfoAsync (PlaceTradeReqRequest placeTradeReqRequest = default(PlaceTradeReqRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/trade/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (placeTradeReqRequest != null && placeTradeReqRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(placeTradeReqRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = placeTradeReqRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceTradeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  Get the full details of a specific trade
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <returns>TradeRequestModel</returns>
        public TradeRequestModel TradeDetails (Guid? trade = default(Guid?))
        {
             ApiResponse<TradeRequestModel> localVarResponse = TradeDetailsWithHttpInfo(trade);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the full details of a specific trade
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <returns>ApiResponse of TradeRequestModel</returns>
        public ApiResponse<TradeRequestModel> TradeDetailsWithHttpInfo (Guid? trade = default(Guid?))
        {

            var localVarPath = "/inventories/api/v1/trade/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trade", trade)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradeDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

        /// <summary>
        ///  Get the full details of a specific trade
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TradeRequestModel</returns>
        public async System.Threading.Tasks.Task<TradeRequestModel> TradeDetailsAsync (Guid? trade = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TradeRequestModel> localVarResponse = await TradeDetailsWithHttpInfoAsync(trade, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the full details of a specific trade
        /// </summary>
        /// <exception cref="EconomyKit.UnityClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trade"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TradeRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeRequestModel>> TradeDetailsWithHttpInfoAsync (Guid? trade = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/inventories/api/v1/trade/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trade", trade)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradeDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TradeRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeRequestModel)));
        }

    }
}
