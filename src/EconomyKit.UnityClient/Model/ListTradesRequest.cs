/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// ListTradesRequest
    /// </summary>
    [DataContract]
    public partial class ListTradesRequest :  IEquatable<ListTradesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListTradesRequest" /> class.
        /// </summary>
        /// <param name="player">player.</param>
        /// <param name="activeOnly">activeOnly (default to false).</param>
        public ListTradesRequest(Guid player = default(Guid), bool activeOnly = false)
        {
            this.Player = player;
            // use default value if no "activeOnly" provided
            if (activeOnly == null)
            {
                this.ActiveOnly = false;
            }
            else
            {
                this.ActiveOnly = activeOnly;
            }
        }

        /// <summary>
        /// Gets or Sets Player
        /// </summary>
        [DataMember(Name="player", EmitDefaultValue=false)]
        public Guid Player { get; set; }

        /// <summary>
        /// Gets or Sets ActiveOnly
        /// </summary>
        [DataMember(Name="active_only", EmitDefaultValue=false)]
        public bool ActiveOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListTradesRequest {\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  ActiveOnly: ").Append(ActiveOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListTradesRequest);
        }

        /// <summary>
        /// Returns true if ListTradesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ListTradesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListTradesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Player == input.Player ||
                    (this.Player != null &&
                    this.Player.Equals(input.Player))
                ) && 
                (
                    this.ActiveOnly == input.ActiveOnly ||
                    (this.ActiveOnly != null &&
                    this.ActiveOnly.Equals(input.ActiveOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Player != null)
                    hashCode = hashCode * 59 + this.Player.GetHashCode();
                if (this.ActiveOnly != null)
                    hashCode = hashCode * 59 + this.ActiveOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
