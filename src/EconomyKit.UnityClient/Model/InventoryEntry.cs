/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// InventoryEntry
    /// </summary>
    [DataContract]
    public partial class InventoryEntry :  IEquatable<InventoryEntry>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public ItemType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryEntry" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="uniqueItem">uniqueItem.</param>
        /// <param name="commodityStack">commodityStack.</param>
        public InventoryEntry(ItemType type = default(ItemType), UniqueItemResult uniqueItem = default(UniqueItemResult), CommodityStackResult commodityStack = default(CommodityStackResult))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InventoryEntry and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            this.UniqueItem = uniqueItem;
            this.CommodityStack = commodityStack;
        }


        /// <summary>
        /// Gets or Sets UniqueItem
        /// </summary>
        [DataMember(Name="unique_item", EmitDefaultValue=false)]
        public UniqueItemResult UniqueItem { get; set; }

        /// <summary>
        /// Gets or Sets CommodityStack
        /// </summary>
        [DataMember(Name="commodity_stack", EmitDefaultValue=false)]
        public CommodityStackResult CommodityStack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryEntry {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UniqueItem: ").Append(UniqueItem).Append("\n");
            sb.Append("  CommodityStack: ").Append(CommodityStack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryEntry);
        }

        /// <summary>
        /// Returns true if InventoryEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UniqueItem == input.UniqueItem ||
                    (this.UniqueItem != null &&
                    this.UniqueItem.Equals(input.UniqueItem))
                ) && 
                (
                    this.CommodityStack == input.CommodityStack ||
                    (this.CommodityStack != null &&
                    this.CommodityStack.Equals(input.CommodityStack))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UniqueItem != null)
                    hashCode = hashCode * 59 + this.UniqueItem.GetHashCode();
                if (this.CommodityStack != null)
                    hashCode = hashCode * 59 + this.CommodityStack.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
