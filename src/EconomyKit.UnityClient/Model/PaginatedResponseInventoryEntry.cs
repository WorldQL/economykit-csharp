/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// PaginatedResponseInventoryEntry
    /// </summary>
    [DataContract]
    public partial class PaginatedResponseInventoryEntry :  IEquatable<PaginatedResponseInventoryEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginatedResponseInventoryEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaginatedResponseInventoryEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginatedResponseInventoryEntry" /> class.
        /// </summary>
        /// <param name="next">next.</param>
        /// <param name="prev">prev.</param>
        /// <param name="results">results (required).</param>
        public PaginatedResponseInventoryEntry(string next = default(string), string prev = default(string), List<InventoryEntry> results = default(List<InventoryEntry>))
        {
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new InvalidDataException("results is a required property for PaginatedResponseInventoryEntry and cannot be null");
            }
            else
            {
                this.Results = results;
            }

            this.Next = next;
            this.Prev = prev;
        }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public string Next { get; set; }

        /// <summary>
        /// Gets or Sets Prev
        /// </summary>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public string Prev { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=true)]
        public List<InventoryEntry> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaginatedResponseInventoryEntry {\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaginatedResponseInventoryEntry);
        }

        /// <summary>
        /// Returns true if PaginatedResponseInventoryEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of PaginatedResponseInventoryEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginatedResponseInventoryEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Prev == input.Prev ||
                    (this.Prev != null &&
                    this.Prev.Equals(input.Prev))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                if (this.Prev != null)
                    hashCode = hashCode * 59 + this.Prev.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Next (string) maxLength
            if(this.Next != null && this.Next.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next, length must be less than 2083.", new [] { "Next" });
            }

            // Next (string) minLength
            if(this.Next != null && this.Next.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Next, length must be greater than 1.", new [] { "Next" });
            }

            // Prev (string) maxLength
            if(this.Prev != null && this.Prev.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Prev, length must be less than 2083.", new [] { "Prev" });
            }

            // Prev (string) minLength
            if(this.Prev != null && this.Prev.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Prev, length must be greater than 1.", new [] { "Prev" });
            }

            yield break;
        }
    }

}
