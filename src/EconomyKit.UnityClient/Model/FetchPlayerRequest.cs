/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// FetchPlayerRequest
    /// </summary>
    [DataContract]
    public partial class FetchPlayerRequest :  IEquatable<FetchPlayerRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets IdType
        /// </summary>
        [DataMember(Name="id_type", EmitDefaultValue=true)]
        public IdentifierType IdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchPlayerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FetchPlayerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchPlayerRequest" /> class.
        /// </summary>
        /// <param name="displayName">displayName.</param>
        /// <param name="idType">idType (required).</param>
        /// <param name="idPayload">idPayload (required).</param>
        public FetchPlayerRequest(string displayName = default(string), IdentifierType idType = default(IdentifierType), string idPayload = default(string))
        {
            // to ensure "idType" is required (not null)
            if (idType == null)
            {
                throw new InvalidDataException("idType is a required property for FetchPlayerRequest and cannot be null");
            }
            else
            {
                this.IdType = idType;
            }

            // to ensure "idPayload" is required (not null)
            if (idPayload == null)
            {
                throw new InvalidDataException("idPayload is a required property for FetchPlayerRequest and cannot be null");
            }
            else
            {
                this.IdPayload = idPayload;
            }

            this.DisplayName = displayName;
        }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }


        /// <summary>
        /// Gets or Sets IdPayload
        /// </summary>
        [DataMember(Name="id_payload", EmitDefaultValue=true)]
        public string IdPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FetchPlayerRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdPayload: ").Append(IdPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FetchPlayerRequest);
        }

        /// <summary>
        /// Returns true if FetchPlayerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FetchPlayerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FetchPlayerRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) && 
                (
                    this.IdPayload == input.IdPayload ||
                    (this.IdPayload != null &&
                    this.IdPayload.Equals(input.IdPayload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.IdType != null)
                    hashCode = hashCode * 59 + this.IdType.GetHashCode();
                if (this.IdPayload != null)
                    hashCode = hashCode * 59 + this.IdPayload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
