/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// TradeRequestModel
    /// </summary>
    [DataContract]
    public partial class TradeRequestModel :  IEquatable<TradeRequestModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeRequestModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradeRequestModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeRequestModel" /> class.
        /// </summary>
        /// <param name="timeCreated">timeCreated.</param>
        /// <param name="id">id.</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="recipient">recipient (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="senderCommodityStacks">senderCommodityStacks (required).</param>
        /// <param name="senderUniqueItems">senderUniqueItems (required).</param>
        /// <param name="recipientCommodityStacks">recipientCommodityStacks (required).</param>
        /// <param name="recipientUniqueItems">recipientUniqueItems (required).</param>
        public TradeRequestModel(DateTime timeCreated = default(DateTime), Guid id = default(Guid), PlayerModel sender = default(PlayerModel), PlayerModel recipient = default(PlayerModel), string status = default(string), List<CommodityStackResult> senderCommodityStacks = default(List<CommodityStackResult>), List<UniqueItemResult> senderUniqueItems = default(List<UniqueItemResult>), List<CommodityStackResult> recipientCommodityStacks = default(List<CommodityStackResult>), List<UniqueItemResult> recipientUniqueItems = default(List<UniqueItemResult>))
        {
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new InvalidDataException("sender is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.Sender = sender;
            }

            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new InvalidDataException("recipient is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.Recipient = recipient;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "senderCommodityStacks" is required (not null)
            if (senderCommodityStacks == null)
            {
                throw new InvalidDataException("senderCommodityStacks is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.SenderCommodityStacks = senderCommodityStacks;
            }

            // to ensure "senderUniqueItems" is required (not null)
            if (senderUniqueItems == null)
            {
                throw new InvalidDataException("senderUniqueItems is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.SenderUniqueItems = senderUniqueItems;
            }

            // to ensure "recipientCommodityStacks" is required (not null)
            if (recipientCommodityStacks == null)
            {
                throw new InvalidDataException("recipientCommodityStacks is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.RecipientCommodityStacks = recipientCommodityStacks;
            }

            // to ensure "recipientUniqueItems" is required (not null)
            if (recipientUniqueItems == null)
            {
                throw new InvalidDataException("recipientUniqueItems is a required property for TradeRequestModel and cannot be null");
            }
            else
            {
                this.RecipientUniqueItems = recipientUniqueItems;
            }

            this.TimeCreated = timeCreated;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets TimeCreated
        /// </summary>
        [DataMember(Name="time_created", EmitDefaultValue=false)]
        public DateTime TimeCreated { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=true)]
        public PlayerModel Sender { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="recipient", EmitDefaultValue=true)]
        public PlayerModel Recipient { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SenderCommodityStacks
        /// </summary>
        [DataMember(Name="sender_commodity_stacks", EmitDefaultValue=true)]
        public List<CommodityStackResult> SenderCommodityStacks { get; set; }

        /// <summary>
        /// Gets or Sets SenderUniqueItems
        /// </summary>
        [DataMember(Name="sender_unique_items", EmitDefaultValue=true)]
        public List<UniqueItemResult> SenderUniqueItems { get; set; }

        /// <summary>
        /// Gets or Sets RecipientCommodityStacks
        /// </summary>
        [DataMember(Name="recipient_commodity_stacks", EmitDefaultValue=true)]
        public List<CommodityStackResult> RecipientCommodityStacks { get; set; }

        /// <summary>
        /// Gets or Sets RecipientUniqueItems
        /// </summary>
        [DataMember(Name="recipient_unique_items", EmitDefaultValue=true)]
        public List<UniqueItemResult> RecipientUniqueItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeRequestModel {\n");
            sb.Append("  TimeCreated: ").Append(TimeCreated).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SenderCommodityStacks: ").Append(SenderCommodityStacks).Append("\n");
            sb.Append("  SenderUniqueItems: ").Append(SenderUniqueItems).Append("\n");
            sb.Append("  RecipientCommodityStacks: ").Append(RecipientCommodityStacks).Append("\n");
            sb.Append("  RecipientUniqueItems: ").Append(RecipientUniqueItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeRequestModel);
        }

        /// <summary>
        /// Returns true if TradeRequestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeRequestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeRequestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeCreated == input.TimeCreated ||
                    (this.TimeCreated != null &&
                    this.TimeCreated.Equals(input.TimeCreated))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SenderCommodityStacks == input.SenderCommodityStacks ||
                    this.SenderCommodityStacks != null &&
                    input.SenderCommodityStacks != null &&
                    this.SenderCommodityStacks.SequenceEqual(input.SenderCommodityStacks)
                ) && 
                (
                    this.SenderUniqueItems == input.SenderUniqueItems ||
                    this.SenderUniqueItems != null &&
                    input.SenderUniqueItems != null &&
                    this.SenderUniqueItems.SequenceEqual(input.SenderUniqueItems)
                ) && 
                (
                    this.RecipientCommodityStacks == input.RecipientCommodityStacks ||
                    this.RecipientCommodityStacks != null &&
                    input.RecipientCommodityStacks != null &&
                    this.RecipientCommodityStacks.SequenceEqual(input.RecipientCommodityStacks)
                ) && 
                (
                    this.RecipientUniqueItems == input.RecipientUniqueItems ||
                    this.RecipientUniqueItems != null &&
                    input.RecipientUniqueItems != null &&
                    this.RecipientUniqueItems.SequenceEqual(input.RecipientUniqueItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeCreated != null)
                    hashCode = hashCode * 59 + this.TimeCreated.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SenderCommodityStacks != null)
                    hashCode = hashCode * 59 + this.SenderCommodityStacks.GetHashCode();
                if (this.SenderUniqueItems != null)
                    hashCode = hashCode * 59 + this.SenderUniqueItems.GetHashCode();
                if (this.RecipientCommodityStacks != null)
                    hashCode = hashCode * 59 + this.RecipientCommodityStacks.GetHashCode();
                if (this.RecipientUniqueItems != null)
                    hashCode = hashCode * 59 + this.RecipientUniqueItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
