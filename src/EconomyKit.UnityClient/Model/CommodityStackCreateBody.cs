/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// CommodityStackCreateBody
    /// </summary>
    [DataContract]
    public partial class CommodityStackCreateBody :  IEquatable<CommodityStackCreateBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityStackCreateBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommodityStackCreateBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityStackCreateBody" /> class.
        /// </summary>
        /// <param name="player">player (required).</param>
        /// <param name="commodity">commodity (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="decimalPlaces">decimalPlaces (default to 0).</param>
        public CommodityStackCreateBody(Guid player = default(Guid), Guid commodity = default(Guid), int amount = default(int), int decimalPlaces = 0)
        {
            // to ensure "player" is required (not null)
            if (player == null)
            {
                throw new InvalidDataException("player is a required property for CommodityStackCreateBody and cannot be null");
            }
            else
            {
                this.Player = player;
            }

            // to ensure "commodity" is required (not null)
            if (commodity == null)
            {
                throw new InvalidDataException("commodity is a required property for CommodityStackCreateBody and cannot be null");
            }
            else
            {
                this.Commodity = commodity;
            }

            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for CommodityStackCreateBody and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }

            // use default value if no "decimalPlaces" provided
            if (decimalPlaces == null)
            {
                this.DecimalPlaces = 0;
            }
            else
            {
                this.DecimalPlaces = decimalPlaces;
            }
        }

        /// <summary>
        /// Gets or Sets Player
        /// </summary>
        [DataMember(Name="player", EmitDefaultValue=true)]
        public Guid Player { get; set; }

        /// <summary>
        /// Gets or Sets Commodity
        /// </summary>
        [DataMember(Name="commodity", EmitDefaultValue=true)]
        public Guid Commodity { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets DecimalPlaces
        /// </summary>
        [DataMember(Name="decimal_places", EmitDefaultValue=false)]
        public int DecimalPlaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommodityStackCreateBody {\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  Commodity: ").Append(Commodity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommodityStackCreateBody);
        }

        /// <summary>
        /// Returns true if CommodityStackCreateBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CommodityStackCreateBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommodityStackCreateBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Player == input.Player ||
                    (this.Player != null &&
                    this.Player.Equals(input.Player))
                ) && 
                (
                    this.Commodity == input.Commodity ||
                    (this.Commodity != null &&
                    this.Commodity.Equals(input.Commodity))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Player != null)
                    hashCode = hashCode * 59 + this.Player.GetHashCode();
                if (this.Commodity != null)
                    hashCode = hashCode * 59 + this.Commodity.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.DecimalPlaces != null)
                    hashCode = hashCode * 59 + this.DecimalPlaces.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
