/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// StorefrontResult
    /// </summary>
    [DataContract]
    public partial class StorefrontResult :  IEquatable<StorefrontResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorefrontResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontResult" /> class.
        /// </summary>
        /// <param name="storefrontId">storefrontId (required).</param>
        /// <param name="appId">appId (required).</param>
        /// <param name="playerId">playerId (required).</param>
        /// <param name="items">items (required).</param>
        public StorefrontResult(Guid storefrontId = default(Guid), Guid appId = default(Guid), Guid playerId = default(Guid), List<StorefrontItemResult> items = default(List<StorefrontItemResult>))
        {
            // to ensure "storefrontId" is required (not null)
            if (storefrontId == null)
            {
                throw new InvalidDataException("storefrontId is a required property for StorefrontResult and cannot be null");
            }
            else
            {
                this.StorefrontId = storefrontId;
            }

            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for StorefrontResult and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }

            // to ensure "playerId" is required (not null)
            if (playerId == null)
            {
                throw new InvalidDataException("playerId is a required property for StorefrontResult and cannot be null");
            }
            else
            {
                this.PlayerId = playerId;
            }

            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for StorefrontResult and cannot be null");
            }
            else
            {
                this.Items = items;
            }

        }

        /// <summary>
        /// Gets or Sets StorefrontId
        /// </summary>
        [DataMember(Name="storefront_id", EmitDefaultValue=true)]
        public Guid StorefrontId { get; set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="app_id", EmitDefaultValue=true)]
        public Guid AppId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name="player_id", EmitDefaultValue=true)]
        public Guid PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=true)]
        public List<StorefrontItemResult> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorefrontResult {\n");
            sb.Append("  StorefrontId: ").Append(StorefrontId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorefrontResult);
        }

        /// <summary>
        /// Returns true if StorefrontResult instances are equal
        /// </summary>
        /// <param name="input">Instance of StorefrontResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorefrontResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StorefrontId == input.StorefrontId ||
                    (this.StorefrontId != null &&
                    this.StorefrontId.Equals(input.StorefrontId))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StorefrontId != null)
                    hashCode = hashCode * 59 + this.StorefrontId.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
