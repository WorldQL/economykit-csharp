/*
 * EconomyKit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EconomyKit.UnityClient.Client.OpenAPIDateConverter;

namespace EconomyKit.UnityClient.Model
{
    /// <summary>
    /// StorefrontItemResult
    /// </summary>
    [DataContract]
    public partial class StorefrontItemResult :  IEquatable<StorefrontItemResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontItemResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorefrontItemResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontItemResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="sortWeight">sortWeight (required).</param>
        /// <param name="metadata">Extra, free-form data attached to an item..</param>
        /// <param name="priceUsd">priceUsd (required).</param>
        /// <param name="priceEur">priceEur (required).</param>
        /// <param name="priceGbp">priceGbp (required).</param>
        /// <param name="priceJpy">priceJpy (required).</param>
        /// <param name="priceKrw">priceKrw (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="commodityStacks">commodityStacks (required).</param>
        /// <param name="uniqueItems">uniqueItems (required).</param>
        public StorefrontItemResult(Guid id = default(Guid), string displayName = default(string), string description = default(string), decimal sortWeight = default(decimal), Object metadata = default(Object), decimal priceUsd = default(decimal), decimal priceEur = default(decimal), decimal priceGbp = default(decimal), decimal priceJpy = default(decimal), decimal priceKrw = default(decimal), string image = default(string), List<CommodityStackResult> commodityStacks = default(List<CommodityStackResult>), List<UniqueItemResult> uniqueItems = default(List<UniqueItemResult>))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "sortWeight" is required (not null)
            if (sortWeight == null)
            {
                throw new InvalidDataException("sortWeight is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.SortWeight = sortWeight;
            }

            // to ensure "priceUsd" is required (not null)
            if (priceUsd == null)
            {
                throw new InvalidDataException("priceUsd is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.PriceUsd = priceUsd;
            }

            // to ensure "priceEur" is required (not null)
            if (priceEur == null)
            {
                throw new InvalidDataException("priceEur is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.PriceEur = priceEur;
            }

            // to ensure "priceGbp" is required (not null)
            if (priceGbp == null)
            {
                throw new InvalidDataException("priceGbp is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.PriceGbp = priceGbp;
            }

            // to ensure "priceJpy" is required (not null)
            if (priceJpy == null)
            {
                throw new InvalidDataException("priceJpy is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.PriceJpy = priceJpy;
            }

            // to ensure "priceKrw" is required (not null)
            if (priceKrw == null)
            {
                throw new InvalidDataException("priceKrw is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.PriceKrw = priceKrw;
            }

            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.Image = image;
            }

            // to ensure "commodityStacks" is required (not null)
            if (commodityStacks == null)
            {
                throw new InvalidDataException("commodityStacks is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.CommodityStacks = commodityStacks;
            }

            // to ensure "uniqueItems" is required (not null)
            if (uniqueItems == null)
            {
                throw new InvalidDataException("uniqueItems is a required property for StorefrontItemResult and cannot be null");
            }
            else
            {
                this.UniqueItems = uniqueItems;
            }

            this.Id = id;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="display_name", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SortWeight
        /// </summary>
        [DataMember(Name="sort_weight", EmitDefaultValue=true)]
        public decimal SortWeight { get; set; }

        /// <summary>
        /// Extra, free-form data attached to an item.
        /// </summary>
        /// <value>Extra, free-form data attached to an item.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets PriceUsd
        /// </summary>
        [DataMember(Name="price_usd", EmitDefaultValue=true)]
        public decimal PriceUsd { get; set; }

        /// <summary>
        /// Gets or Sets PriceEur
        /// </summary>
        [DataMember(Name="price_eur", EmitDefaultValue=true)]
        public decimal PriceEur { get; set; }

        /// <summary>
        /// Gets or Sets PriceGbp
        /// </summary>
        [DataMember(Name="price_gbp", EmitDefaultValue=true)]
        public decimal PriceGbp { get; set; }

        /// <summary>
        /// Gets or Sets PriceJpy
        /// </summary>
        [DataMember(Name="price_jpy", EmitDefaultValue=true)]
        public decimal PriceJpy { get; set; }

        /// <summary>
        /// Gets or Sets PriceKrw
        /// </summary>
        [DataMember(Name="price_krw", EmitDefaultValue=true)]
        public decimal PriceKrw { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets CommodityStacks
        /// </summary>
        [DataMember(Name="commodity_stacks", EmitDefaultValue=true)]
        public List<CommodityStackResult> CommodityStacks { get; set; }

        /// <summary>
        /// Gets or Sets UniqueItems
        /// </summary>
        [DataMember(Name="unique_items", EmitDefaultValue=true)]
        public List<UniqueItemResult> UniqueItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorefrontItemResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SortWeight: ").Append(SortWeight).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PriceUsd: ").Append(PriceUsd).Append("\n");
            sb.Append("  PriceEur: ").Append(PriceEur).Append("\n");
            sb.Append("  PriceGbp: ").Append(PriceGbp).Append("\n");
            sb.Append("  PriceJpy: ").Append(PriceJpy).Append("\n");
            sb.Append("  PriceKrw: ").Append(PriceKrw).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  CommodityStacks: ").Append(CommodityStacks).Append("\n");
            sb.Append("  UniqueItems: ").Append(UniqueItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorefrontItemResult);
        }

        /// <summary>
        /// Returns true if StorefrontItemResult instances are equal
        /// </summary>
        /// <param name="input">Instance of StorefrontItemResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorefrontItemResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SortWeight == input.SortWeight ||
                    (this.SortWeight != null &&
                    this.SortWeight.Equals(input.SortWeight))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.PriceUsd == input.PriceUsd ||
                    (this.PriceUsd != null &&
                    this.PriceUsd.Equals(input.PriceUsd))
                ) && 
                (
                    this.PriceEur == input.PriceEur ||
                    (this.PriceEur != null &&
                    this.PriceEur.Equals(input.PriceEur))
                ) && 
                (
                    this.PriceGbp == input.PriceGbp ||
                    (this.PriceGbp != null &&
                    this.PriceGbp.Equals(input.PriceGbp))
                ) && 
                (
                    this.PriceJpy == input.PriceJpy ||
                    (this.PriceJpy != null &&
                    this.PriceJpy.Equals(input.PriceJpy))
                ) && 
                (
                    this.PriceKrw == input.PriceKrw ||
                    (this.PriceKrw != null &&
                    this.PriceKrw.Equals(input.PriceKrw))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.CommodityStacks == input.CommodityStacks ||
                    this.CommodityStacks != null &&
                    input.CommodityStacks != null &&
                    this.CommodityStacks.SequenceEqual(input.CommodityStacks)
                ) && 
                (
                    this.UniqueItems == input.UniqueItems ||
                    this.UniqueItems != null &&
                    input.UniqueItems != null &&
                    this.UniqueItems.SequenceEqual(input.UniqueItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SortWeight != null)
                    hashCode = hashCode * 59 + this.SortWeight.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.PriceUsd != null)
                    hashCode = hashCode * 59 + this.PriceUsd.GetHashCode();
                if (this.PriceEur != null)
                    hashCode = hashCode * 59 + this.PriceEur.GetHashCode();
                if (this.PriceGbp != null)
                    hashCode = hashCode * 59 + this.PriceGbp.GetHashCode();
                if (this.PriceJpy != null)
                    hashCode = hashCode * 59 + this.PriceJpy.GetHashCode();
                if (this.PriceKrw != null)
                    hashCode = hashCode * 59 + this.PriceKrw.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.CommodityStacks != null)
                    hashCode = hashCode * 59 + this.CommodityStacks.GetHashCode();
                if (this.UniqueItems != null)
                    hashCode = hashCode * 59 + this.UniqueItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if(this.DisplayName != null && this.DisplayName.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 120.", new [] { "DisplayName" });
            }


            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 400.", new [] { "Description" });
            }


            yield break;
        }
    }

}
